51. N-Queens
Hard

3825

119

Add to List

Share
The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]



class Solution {
public:
    
    vector<vector<string>>res;
    
    bool issafe(vector<string> &board , int row, int col, int size)
        
    {
        for(int i =row;i>=0;i--)
        {
            if(board[i][col]=='Q') return false;
        }
        
        
        for(int i =row, j =col; i>=0 &&j>=0;--i,--j)
        {
            if(board[i][j]=='Q') return false;
        }
        
        
            
        for(int i =row,j =col; i>=0 && j<size;i--,j++)
        {
            if(board[i][j]=='Q') return false;
        }
        
        
        return  true;
        
        
        //  for(int i=row;i>=0;--i)
        //     if(board[i][col] == 'Q') return false;
        // // check left diagonal
        // for(int i=row,j=col;i>=0&&j>=0;--i,--j)
        //     if(board[i][j] == 'Q') return false;
        // //check right diagonal
        // for(int i=row,j=col;i>=0&&j<board.size();--i,++j)
        //     if(board[i][j] == 'Q') return false;
        // return true;
        
        
        
    }
    
    
    
    void helper(vector<string> &board , int size, int row)
    {
        if(row==size)
        {
            res.push_back(board);
            return;
        }
        
        for(int  col =0;col< size;col++)
        {
            
            if(issafe(board,row,col, size))
            {
                board[row][col]='Q';
                
                helper(board, size,row+1);
                
                board[row][col] ='.';
                
                
                
            }
            
            
        }
        
    }
    vector<vector<string>> solveNQueens(int n) {
        
        if(n<=0) return {{}};
        
        vector<string> board (n, string(n,'.'));
        helper(board, n , 0);
        
        return res;
    }
};